{"version":3,"sources":["utils/buildAqiColor.js","utils/aqiColors.js","utils/formatDate.js","components/Aqi.js","components/AqiIndicator.js","components/AqiChart.js","App.js","reportWebVitals.js","index.js"],"names":["buildAqiColor","aqi","colorIndicator","good","satisfactory","moderate","poor","veryPoor","severe","timeAgo","date","sec","Date","getTime","parseInt","min","h","d","m","y","Aqi","useState","airAqiData","setAirAqiData","webSocket","setWs","connect","useCallback","connectInterval","timeout","ws","WebSocket","onopen","console","log","clearTimeout","onmessage","e","data","JSON","parse","Array","isArray","newData","reduce","initial","current","timestamp","city","a","onclose","Math","reason","setTimeout","check","onerror","err","error","message","close","readyState","CLOSED","useEffect","className","cities","Object","keys","length","cellPadding","cellSpacing","border","map","cityData","style","backgroundColor","toFixed","renderChildren","aqiData","AqiIndicator","CustomTooltip","payload","label","active","value","RectangleBar","props","x","width","height","fill","AqiChart","ResponsiveContainer","BarChart","margin","top","right","left","bottom","XAxis","dataKey","stroke","YAxis","tickCount","Tooltip","content","Bar","shape","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2175be6c.chunk.js","sourcesContent":["import { colorIndicator } from '../utils';\r\n\r\nexport const buildAqiColor = (aqi) => {\r\n  if (aqi >= 0 && aqi <= 50) return colorIndicator.good;\r\n  if (aqi > 50 && aqi <= 100) return colorIndicator.satisfactory;\r\n  if (aqi > 100 && aqi <= 200) return colorIndicator.moderate;\r\n  if (aqi > 200 && aqi <= 300) return colorIndicator.poor;\r\n  if (aqi > 300 && aqi <= 400) return colorIndicator.veryPoor;\r\n  if (aqi > 400 && aqi <= 500) return colorIndicator.severe;\r\n}\r\n\r\nexport const buildAqiStatus = (aqi) => {\r\n  if (aqi >= 0 && aqi <= 50) return \"Good\";\r\n  if (aqi > 50 && aqi <= 100) return \"Satisfactory\";\r\n  if (aqi > 100 && aqi <= 200) return \"Moderate\";\r\n  if (aqi > 200 && aqi <= 300) return \"Poor\";\r\n  if (aqi > 300 && aqi <= 400) return \"Very Poor\";\r\n  if (aqi > 400 && aqi <= 500) return \"Severe\";\r\n}","export const colorIndicator = {\r\n  good: '#66BB6A',\r\n  satisfactory: '#9CCC65',\r\n  moderate: '#D4E157',\r\n  poor: '#FFA726',\r\n  veryPoor: '#F44336',\r\n  severe: '#B71C1C',\r\n}","export const timeAgo = (date) => {\r\n  var currDate = new Date();\r\n  var diffMs = currDate.getTime() - new Date(date).getTime();\r\n  var sec = diffMs / 1000;\r\n  if (parseInt(sec) === 0) return \"Just Now\";\r\n  if (sec < 60)\r\n    return parseInt(sec) + \" second\" + (parseInt(sec) > 1 ? \"s\" : \"\") + \" ago\";\r\n  var min = sec / 60;\r\n  if (min < 60)\r\n    return parseInt(min) + \" minute\" + (parseInt(min) > 1 ? \"s\" : \"\") + \" ago\";\r\n  var h = min / 60;\r\n  if (h < 24)\r\n    return parseInt(h) + \" hour\" + (parseInt(h) > 1 ? \"s\" : \"\") + \" ago\";\r\n  var d = h / 24;\r\n  if (d < 30)\r\n    return parseInt(d) + \" day\" + (parseInt(d) > 1 ? \"s\" : \"\") + \" ago\";\r\n  var m = d / 30;\r\n  if (m < 12)\r\n    return parseInt(m) + \" month\" + (parseInt(m) > 1 ? \"s\" : \"\") + \" ago\";\r\n  var y = m / 12;\r\n  return parseInt(y) + \" year\" + (parseInt(y) > 1 ? \"s\" : \"\") + \" ago\";\r\n};\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { AqiChart } from \"../components\";\r\nimport { buildAqiColor, timeAgo } from \"../utils\";\r\n\r\nconst Aqi = () => {\r\n  const [airAqiData, setAirAqiData] = useState(null);\r\n  const [webSocket, setWs] = useState(null);\r\n\r\n  const connect = useCallback(() => {\r\n    let timeout = 250;\r\n    const ws = new WebSocket(\"wss://city-ws.herokuapp.com/â€Œ\");\r\n    let connectInterval;\r\n\r\n    // websocket onopen event listener\r\n    ws.onopen = () => {\r\n      console.log(\"connected websocket app component\");\r\n      setWs(ws);\r\n      timeout = 250; // reset timer to 250 on open of websocket connection\r\n      clearTimeout(connectInterval); // clear Interval on on open of websocket connection\r\n    };\r\n\r\n    ws.onmessage = (e) => {\r\n      let data = JSON.parse(e.data);\r\n      if (data && Array.isArray(data)) {\r\n        const newData = data.reduce((initial, current) => {\r\n          current.timestamp = new Date();\r\n          initial[current.city] = current;\r\n          return initial;\r\n        }, {});\r\n        setAirAqiData((a) => (a ? { ...a, ...newData } : newData));\r\n      }\r\n    };\r\n\r\n    // websocket onclose event listener\r\n    ws.onclose = (e) => {\r\n      console.log(\r\n        `Socket is closed. Reconnect will be attempted in ${Math.min(\r\n          10000 / 1000,\r\n          (timeout + timeout) / 1000\r\n        )} second.`,\r\n        e.reason\r\n      );\r\n\r\n      timeout = timeout + timeout; //increment retry interval\r\n      connectInterval = setTimeout(check, Math.min(10000, timeout)); //call check function after timeout\r\n    };\r\n\r\n    // websocket onerror event listener\r\n    ws.onerror = (err) => {\r\n      console.error(\r\n        \"Socket encountered error: \",\r\n        err.message,\r\n        \"Closing socket\"\r\n      );\r\n\r\n      ws.close();\r\n    };\r\n  }, []); // eslint-disable-line\r\n\r\n  /**\r\n   * utilited by the @function connect to check if the connection is close, if so attempts to reconnect\r\n   */\r\n  const check = useCallback(() => {\r\n    if (!webSocket || webSocket.readyState === WebSocket.CLOSED) connect(); //check if websocket instance is closed, if so call `connect` function.\r\n  }, [connect, webSocket]);\r\n\r\n  useEffect(() => {\r\n    connect();\r\n  }, [connect]);\r\n\r\n  const renderChildren = () => {\r\n    if (airAqiData === null) return <p className=\"noContent\">Loading...</p>;\r\n    const cities = Object.keys(airAqiData);\r\n    if (cities.length === 0) return <p className=\"noContent\">No Data Found.</p>;\r\n    return (\r\n      <div className=\"tableWrapper\">\r\n        <table cellPadding=\"0\" cellSpacing=\"0\" border=\"0\" className=\"apiTable\">\r\n          <thead>\r\n            <tr>\r\n              <td>City</td>\r\n              <td>Current AQI</td>\r\n              <td>Last Updated</td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {cities.map((city) => {\r\n              const cityData = airAqiData[city];\r\n              return (\r\n                <tr\r\n                  key={city}\r\n                  style={{ backgroundColor: buildAqiColor(cityData.aqi) }}\r\n                >\r\n                  <td>{cityData.city}</td>\r\n                  <td>{cityData.aqi.toFixed(2)}</td>\r\n                  <td>{timeAgo(cityData.timestamp)}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"chartContainer\">\r\n      {renderChildren()}\r\n      {airAqiData && <AqiChart aqiData={airAqiData} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Aqi;\r\n","import React from 'react';\r\nimport { colorIndicator } from '../utils';\r\n\r\nconst AqiIndicator = () => {\r\n  return (\r\n    <ul className=\"indicator\">\r\n      <li>\r\n        <span style={{backgroundColor: colorIndicator.good}}></span>\r\n        <span>0-50 (Good)</span>\r\n      </li>\r\n      <li>\r\n        <span style={{backgroundColor: colorIndicator.satisfactory}}></span>\r\n        <span>50-100 (Satisfactory)</span>\r\n      </li>\r\n      <li>\r\n        <span style={{backgroundColor: colorIndicator.moderate}}></span>\r\n        <span>100-200 (Moderate)</span>\r\n      </li>\r\n      <li>\r\n        <span style={{backgroundColor: colorIndicator.poor}}></span>\r\n        <span>200-300 (Poor)</span>\r\n      </li>\r\n      <li>\r\n        <span style={{backgroundColor: colorIndicator.veryPoor}}></span>\r\n        <span>300-400 (Very Poor)</span>\r\n      </li>\r\n      <li>\r\n        <span style={{backgroundColor: colorIndicator.severe}}></span>\r\n        <span>400-500 (Severe)</span>\r\n      </li>\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default AqiIndicator;\r\n","import React from \"react\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport { buildAqiColor, timeAgo, buildAqiStatus } from '../utils';\r\n\r\nconst CustomTooltip = ({ payload, label, active }) => {\r\n  if (active) {\r\n    return (\r\n      <div className=\"custom-tooltip\" style={{backgroundColor: buildAqiColor(payload[0].value)}}>\r\n        <h3>{buildAqiStatus(payload[0].value)}</h3>\r\n        <p className=\"city\">{label}</p>\r\n        <p className=\"aqi\">{`Aqi : ${payload[0].value.toFixed(2)}`}</p>\r\n        <p className=\"updatedAt\">{`Last Updated: ${timeAgo(payload[0].payload.timestamp)}`}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nconst RectangleBar = (props) => {\r\n  const {\r\n    x, y, width, height, aqi\r\n  } = props;\r\n\r\n  return <rect x={x} y={y} width={width} height={height} style={{fill:buildAqiColor(aqi)}} />;\r\n};\r\n\r\nconst AqiChart = ({ aqiData }) => {\r\n  const data = Object.keys(aqiData).reduce((initial, current) => {\r\n    initial = [...initial, aqiData[current]];\r\n    return initial;\r\n  }, []);\r\n  return (\r\n    <div className=\"chartWrapper\">\r\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n        <BarChart\r\n          width={500}\r\n          height={300}\r\n          data={data}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <XAxis dataKey=\"city\" stroke=\"#fff\" />\r\n          <YAxis tickCount={25} stroke=\"#fff\" />\r\n          <Tooltip content={<CustomTooltip />} />\r\n          <Bar dataKey=\"aqi\" fill=\"#fff\" shape={<RectangleBar />} />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AqiChart;\r\n","import React from \"react\";\r\nimport { Aqi, AqiIndicator } from './components';\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <header className=\"header\">\r\n        <h1>Air Quality Monitoring</h1>\r\n      </header>\r\n      <main>\r\n        <AqiIndicator />\r\n        <Aqi />\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}